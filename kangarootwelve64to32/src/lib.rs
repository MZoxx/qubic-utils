pub fn kangarootwelve64to32(input: &[u64; 8], output: &mut [u64; 4]) {
    let mut a_ba: u64;
    let mut a_be: u64;
    let mut a_bi: u64;
    let mut a_bo: u64;
    let mut a_bu: u64;
    let mut a_ga: u64;
    let mut a_ge: u64;
    let mut a_gi: u64;
    let mut a_go: u64;
    let mut a_gu: u64;
    let mut a_ka: u64;
    let mut a_ke: u64;
    let mut a_ki: u64;
    let mut a_ko: u64;
    let mut a_ku: u64;
    let mut a_ma: u64;
    let mut a_me: u64;
    let mut a_mi: u64;
    let mut a_mo: u64;
    let mut a_mu: u64;
    let mut a_sa: u64;
    let mut a_se: u64;
    let mut a_si: u64;
    let mut a_so: u64;
    let mut a_su: u64;
    let mut b_ba: u64;
    let mut b_be: u64;
    let mut b_bi: u64;
    let mut b_bo: u64;
    let mut b_bu: u64;
    let mut b_ga: u64;
    let mut b_ge: u64;
    let mut b_gi: u64;
    let mut b_go: u64;
    let mut b_gu: u64;
    let mut b_ka: u64;
    let mut b_ke: u64;
    let mut b_ki: u64;
    let mut b_ko: u64;
    let mut b_ku: u64;
    let mut b_ma: u64;
    let mut b_me: u64;
    let mut b_mi: u64;
    let mut b_mo: u64;
    let mut b_mu: u64;
    let mut b_sa: u64;
    let mut b_se: u64;
    let mut b_si: u64;
    let mut b_so: u64;
    let mut b_su: u64;
    let mut c_a = input[0] ^ input[5] ^ 0x8000000000000000;
    let mut c_e = input[1] ^ input[6];
    let mut c_i = input[2] ^ input[7];
    let mut c_o = input[3] ^ 0x0700;
    let mut c_u: u64;
    let mut d_a: u64;
    let mut d_e: u64;
    let mut d_i: u64;
    let mut d_o: u64;
    let mut d_u: u64;
    let mut e_ba: u64;
    let mut e_be: u64;
    let mut e_bi: u64;
    let mut e_bo: u64;
    let mut e_bu: u64;
    let mut e_ga: u64;
    let mut e_ge: u64;
    let mut e_gi: u64;
    let mut e_go: u64;
    let mut e_gu: u64;
    let mut e_ka: u64;
    let mut e_ke: u64;
    let mut e_ki: u64;
    let mut e_ko: u64;
    let mut e_ku: u64;
    let mut e_ma: u64;
    let mut e_me: u64;
    let mut e_mi: u64;
    let mut e_mo: u64;
    let mut e_mu: u64;
    let mut e_sa: u64;
    let mut e_se: u64;
    let mut e_si: u64;
    let mut e_so: u64;
    let mut e_su: u64;

    d_a = input[4] ^ rol64(c_e, 1);
    d_e = c_a ^ rol64(c_i, 1);
    d_i = c_e ^ rol64(c_o, 1);
    d_o = c_i ^ rol64(input[4], 1);
    d_u = c_o ^ rol64(c_a, 1);
    a_ba = input[0] ^ d_a;
    b_be = rol64(input[6] ^ d_e, 44);
    b_bi = rol64(d_i, 43);
    b_bo = rol64(d_o, 21);
    b_bu = rol64(d_u, 14);
    e_ba = a_ba ^ andn(b_be, b_bi) ^ 0x000000008000808b;
    e_be = b_be ^ andn(b_bi, b_bo);
    e_bi = b_bi ^ andn(b_bo, b_bu);
    e_bo = b_bo ^ andn(b_bu, a_ba);
    e_bu = b_bu ^ andn(a_ba, b_be);
    b_ga = rol64(input[3] ^ d_o, 28);
    b_ge = rol64(d_u, 20);
    b_gi = rol64(d_a, 3);
    b_go = rol64(d_e, 45);
    b_gu = rol64(d_i, 61);
    e_ga = b_ga ^ andn(b_ge, b_gi);
    e_ge = b_ge ^ andn(b_gi, b_go);
    e_gi = b_gi ^ andn(b_go, b_gu);
    e_go = b_go ^ andn(b_gu, b_ga);
    e_gu = b_gu ^ andn(b_ga, b_ge);
    b_ka = rol64(input[1] ^ d_e, 1);
    b_ke = rol64(input[7] ^ d_i, 6);
    b_ki = rol64(d_o, 25);
    b_ko = rol64(d_u, 8);
    b_ku = rol64(d_a ^ 0x8000000000000000, 18);
    e_ka = b_ka ^ andn(b_ke, b_ki);
    e_ke = b_ke ^ andn(b_ki, b_ko);
    e_ki = b_ki ^ andn(b_ko, b_ku);
    e_ko = b_ko ^ andn(b_ku, b_ka);
    e_ku = b_ku ^ andn(b_ka, b_ke);
    b_ma = rol64(input[4] ^ d_u, 27);
    b_me = rol64(input[5] ^ d_a, 36);
    b_mi = rol64(d_e, 10);
    b_mo = rol64(d_i, 15);
    b_mu = rol64(d_o, 56);
    e_ma = b_ma ^ andn(b_me, b_mi);
    e_me = b_me ^ andn(b_mi, b_mo);
    e_mi = b_mi ^ andn(b_mo, b_mu);
    e_mo = b_mo ^ andn(b_mu, b_ma);
    e_mu = b_mu ^ andn(b_ma, b_me);
    b_sa = rol64(input[2] ^ d_i, 62);
    b_se = rol64(d_o ^ 0x0700, 55);
    b_si = rol64(d_u, 39);
    b_so = rol64(d_a, 41);
    b_su = rol64(d_e, 2);
    e_sa = b_sa ^ andn(b_se, b_si);
    e_se = b_se ^ andn(b_si, b_so);
    e_si = b_si ^ andn(b_so, b_su);
    e_so = b_so ^ andn(b_su, b_sa);
    e_su = b_su ^ andn(b_sa, b_se);
    c_a = e_ba ^ e_ga ^ e_ka ^ e_ma ^ e_sa;
    c_e = e_be ^ e_ge ^ e_ke ^ e_me ^ e_se;
    c_i = e_bi ^ e_gi ^ e_ki ^ e_mi ^ e_si;
    c_o = e_bo ^ e_go ^ e_ko ^ e_mo ^ e_so;
    c_u = e_bu ^ e_gu ^ e_ku ^ e_mu ^ e_su;

    d_a = c_u ^ rol64(c_e, 1);
    d_e = c_a ^ rol64(c_i, 1);
    d_i = c_e ^ rol64(c_o, 1);
    d_o = c_i ^ rol64(c_u, 1);
    d_u = c_o ^ rol64(c_a, 1);
    e_ba ^= d_a;
    b_be = rol64(e_ge ^ d_e, 44);
    b_bi = rol64(e_ki ^ d_i, 43);
    b_bo = rol64(e_mo ^ d_o, 21);
    b_bu = rol64(e_su ^ d_u, 14);
    a_ba = e_ba ^ andn(b_be, b_bi) ^ 0x800000000000008b;
    a_be = b_be ^ andn(b_bi, b_bo);
    a_bi = b_bi ^ andn(b_bo, b_bu);
    a_bo = b_bo ^ andn(b_bu, e_ba);
    a_bu = b_bu ^ andn(e_ba, b_be);
    b_ga = rol64(e_bo ^ d_o, 28);
    b_ge = rol64(e_gu ^ d_u, 20);
    b_gi = rol64(e_ka ^ d_a, 3);
    b_go = rol64(e_me ^ d_e, 45);
    b_gu = rol64(e_si ^ d_i, 61);
    a_ga = b_ga ^ andn(b_ge, b_gi);
    a_ge = b_ge ^ andn(b_gi, b_go);
    a_gi = b_gi ^ andn(b_go, b_gu);
    a_go = b_go ^ andn(b_gu, b_ga);
    a_gu = b_gu ^ andn(b_ga, b_ge);
    b_ka = rol64(e_be ^ d_e, 1);
    b_ke = rol64(e_gi ^ d_i, 6);
    b_ki = rol64(e_ko ^ d_o, 25);
    b_ko = rol64(e_mu ^ d_u, 8);
    b_ku = rol64(e_sa ^ d_a, 18);
    a_ka = b_ka ^ andn(b_ke, b_ki);
    a_ke = b_ke ^ andn(b_ki, b_ko);
    a_ki = b_ki ^ andn(b_ko, b_ku);
    a_ko = b_ko ^ andn(b_ku, b_ka);
    a_ku = b_ku ^ andn(b_ka, b_ke);
    b_ma = rol64(e_bu ^ d_u, 27);
    b_me = rol64(e_ga ^ d_a, 36);
    b_mi = rol64(e_ke ^ d_e, 10);
    b_mo = rol64(e_mi ^ d_i, 15);
    b_mu = rol64(e_so ^ d_o, 56);
    a_ma = b_ma ^ andn(b_me, b_mi);
    a_me = b_me ^ andn(b_mi, b_mo);
    a_mi = b_mi ^ andn(b_mo, b_mu);
    a_mo = b_mo ^ andn(b_mu, b_ma);
    a_mu = b_mu ^ andn(b_ma, b_me);
    b_sa = rol64(e_bi ^ d_i, 62);
    b_se = rol64(e_go ^ d_o, 55);
    b_si = rol64(e_ku ^ d_u, 39);
    b_so = rol64(e_ma ^ d_a, 41);
    b_su = rol64(e_se ^ d_e, 2);
    a_sa = b_sa ^ andn(b_se, b_si);
    a_se = b_se ^ andn(b_si, b_so);
    a_si = b_si ^ andn(b_so, b_su);
    a_so = b_so ^ andn(b_su, b_sa);
    a_su = b_su ^ andn(b_sa, b_se);
    c_a = a_ba ^ a_ga ^ a_ka ^ a_ma ^ a_sa;
    c_e = a_be ^ a_ge ^ a_ke ^ a_me ^ a_se;
    c_i = a_bi ^ a_gi ^ a_ki ^ a_mi ^ a_si;
    c_o = a_bo ^ a_go ^ a_ko ^ a_mo ^ a_so;
    c_u = a_bu ^ a_gu ^ a_ku ^ a_mu ^ a_su;

    d_a = c_u ^ rol64(c_e, 1);
    d_e = c_a ^ rol64(c_i, 1);
    d_i = c_e ^ rol64(c_o, 1);
    d_o = c_i ^ rol64(c_u, 1);
    d_u = c_o ^ rol64(c_a, 1);
    a_ba ^= d_a;
    b_be = rol64(a_ge ^ d_e, 44);
    b_bi = rol64(a_ki ^ d_i, 43);
    b_bo = rol64(a_mo ^ d_o, 21);
    b_bu = rol64(a_su ^ d_u, 14);
    e_ba = a_ba ^ andn(b_be, b_bi) ^ 0x8000000000008089;
    e_be = b_be ^ andn(b_bi, b_bo);
    e_bi = b_bi ^ andn(b_bo, b_bu);
    e_bo = b_bo ^ andn(b_bu, a_ba);
    e_bu = b_bu ^ andn(a_ba, b_be);
    b_ga = rol64(a_bo ^ d_o, 28);
    b_ge = rol64(a_gu ^ d_u, 20);
    b_gi = rol64(a_ka ^ d_a, 3);
    b_go = rol64(a_me ^ d_e, 45);
    b_gu = rol64(a_si ^ d_i, 61);
    e_ga = b_ga ^ andn(b_ge, b_gi);
    e_ge = b_ge ^ andn(b_gi, b_go);
    e_gi = b_gi ^ andn(b_go, b_gu);
    e_go = b_go ^ andn(b_gu, b_ga);
    e_gu = b_gu ^ andn(b_ga, b_ge);
    b_ka = rol64(a_be ^ d_e, 1);
    b_ke = rol64(a_gi ^ d_i, 6);
    b_ki = rol64(a_ko ^ d_o, 25);
    b_ko = rol64(a_mu ^ d_u, 8);
    b_ku = rol64(a_sa ^ d_a, 18);
    e_ka = b_ka ^ andn(b_ke, b_ki);
    e_ke = b_ke ^ andn(b_ki, b_ko);
    e_ki = b_ki ^ andn(b_ko, b_ku);
    e_ko = b_ko ^ andn(b_ku, b_ka);
    e_ku = b_ku ^ andn(b_ka, b_ke);
    b_ma = rol64(a_bu ^ d_u, 27);
    b_me = rol64(a_ga ^ d_a, 36);
    b_mi = rol64(a_ke ^ d_e, 10);
    b_mo = rol64(a_mi ^ d_i, 15);
    b_mu = rol64(a_so ^ d_o, 56);
    e_ma = b_ma ^ andn(b_me, b_mi);
    e_me = b_me ^ andn(b_mi, b_mo);
    e_mi = b_mi ^ andn(b_mo, b_mu);
    e_mo = b_mo ^ andn(b_mu, b_ma);
    e_mu = b_mu ^ andn(b_ma, b_me);
    b_sa = rol64(a_bi ^ d_i, 62);
    b_se = rol64(a_go ^ d_o, 55);
    b_si = rol64(a_ku ^ d_u, 39);
    b_so = rol64(a_ma ^ d_a, 41);
    b_su = rol64(a_se ^ d_e, 2);
    e_sa = b_sa ^ andn(b_se, b_si);
    e_se = b_se ^ andn(b_si, b_so);
    e_si = b_si ^ andn(b_so, b_su);
    e_so = b_so ^ andn(b_su, b_sa);
    e_su = b_su ^ andn(b_sa, b_se);
    c_a = e_ba ^ e_ga ^ e_ka ^ e_ma ^ e_sa;
    c_e = e_be ^ e_ge ^ e_ke ^ e_me ^ e_se;
    c_i = e_bi ^ e_gi ^ e_ki ^ e_mi ^ e_si;
    c_o = e_bo ^ e_go ^ e_ko ^ e_mo ^ e_so;
    c_u = e_bu ^ e_gu ^ e_ku ^ e_mu ^ e_su;

    d_a = c_u ^ rol64(c_e, 1);
    d_e = c_a ^ rol64(c_i, 1);
    d_i = c_e ^ rol64(c_o, 1);
    d_o = c_i ^ rol64(c_u, 1);
    d_u = c_o ^ rol64(c_a, 1);
    e_ba ^= d_a;
    b_be = rol64(e_ge ^ d_e, 44);
    b_bi = rol64(e_ki ^ d_i, 43);
    b_bo = rol64(e_mo ^ d_o, 21);
    b_bu = rol64(e_su ^ d_u, 14);
    a_ba = e_ba ^ andn(b_be, b_bi) ^ 0x8000000000008003;
    a_be = b_be ^ andn(b_bi, b_bo);
    a_bi = b_bi ^ andn(b_bo, b_bu);
    a_bo = b_bo ^ andn(b_bu, e_ba);
    a_bu = b_bu ^ andn(e_ba, b_be);
    b_ga = rol64(e_bo ^ d_o, 28);
    b_ge = rol64(e_gu ^ d_u, 20);
    b_gi = rol64(e_ka ^ d_a, 3);
    b_go = rol64(e_me ^ d_e, 45);
    b_gu = rol64(e_si ^ d_i, 61);
    a_ga = b_ga ^ andn(b_ge, b_gi);
    a_ge = b_ge ^ andn(b_gi, b_go);
    a_gi = b_gi ^ andn(b_go, b_gu);
    a_go = b_go ^ andn(b_gu, b_ga);
    a_gu = b_gu ^ andn(b_ga, b_ge);
    b_ka = rol64(e_be ^ d_e, 1);
    b_ke = rol64(e_gi ^ d_i, 6);
    b_ki = rol64(e_ko ^ d_o, 25);
    b_ko = rol64(e_mu ^ d_u, 8);
    b_ku = rol64(e_sa ^ d_a, 18);
    a_ka = b_ka ^ andn(b_ke, b_ki);
    a_ke = b_ke ^ andn(b_ki, b_ko);
    a_ki = b_ki ^ andn(b_ko, b_ku);
    a_ko = b_ko ^ andn(b_ku, b_ka);
    a_ku = b_ku ^ andn(b_ka, b_ke);
    b_ma = rol64(e_bu ^ d_u, 27);
    b_me = rol64(e_ga ^ d_a, 36);
    b_mi = rol64(e_ke ^ d_e, 10);
    b_mo = rol64(e_mi ^ d_i, 15);
    b_mu = rol64(e_so ^ d_o, 56);
    a_ma = b_ma ^ andn(b_me, b_mi);
    a_me = b_me ^ andn(b_mi, b_mo);
    a_mi = b_mi ^ andn(b_mo, b_mu);
    a_mo = b_mo ^ andn(b_mu, b_ma);
    a_mu = b_mu ^ andn(b_ma, b_me);
    b_sa = rol64(e_bi ^ d_i, 62);
    b_se = rol64(e_go ^ d_o, 55);
    b_si = rol64(e_ku ^ d_u, 39);
    b_so = rol64(e_ma ^ d_a, 41);
    b_su = rol64(e_se ^ d_e, 2);
    a_sa = b_sa ^ andn(b_se, b_si);
    a_se = b_se ^ andn(b_si, b_so);
    a_si = b_si ^ andn(b_so, b_su);
    a_so = b_so ^ andn(b_su, b_sa);
    a_su = b_su ^ andn(b_sa, b_se);
    c_a = a_ba ^ a_ga ^ a_ka ^ a_ma ^ a_sa;
    c_e = a_be ^ a_ge ^ a_ke ^ a_me ^ a_se;
    c_i = a_bi ^ a_gi ^ a_ki ^ a_mi ^ a_si;
    c_o = a_bo ^ a_go ^ a_ko ^ a_mo ^ a_so;
    c_u = a_bu ^ a_gu ^ a_ku ^ a_mu ^ a_su;

    d_a = c_u ^ rol64(c_e, 1);
    d_e = c_a ^ rol64(c_i, 1);
    d_i = c_e ^ rol64(c_o, 1);
    d_o = c_i ^ rol64(c_u, 1);
    d_u = c_o ^ rol64(c_a, 1);
    a_ba ^= d_a;
    b_be = rol64(a_ge ^ d_e, 44);
    b_bi = rol64(a_ki ^ d_i, 43);
    b_bo = rol64(a_mo ^ d_o, 21);
    b_bu = rol64(a_su ^ d_u, 14);
    e_ba = a_ba ^ andn(b_be, b_bi) ^ 0x8000000000008002;
    e_be = b_be ^ andn(b_bi, b_bo);
    e_bi = b_bi ^ andn(b_bo, b_bu);
    e_bo = b_bo ^ andn(b_bu, a_ba);
    e_bu = b_bu ^ andn(a_ba, b_be);
    b_ga = rol64(a_bo ^ d_o, 28);
    b_ge = rol64(a_gu ^ d_u, 20);
    b_gi = rol64(a_ka ^ d_a, 3);
    b_go = rol64(a_me ^ d_e, 45);
    b_gu = rol64(a_si ^ d_i, 61);
    e_ga = b_ga ^ andn(b_ge, b_gi);
    e_ge = b_ge ^ andn(b_gi, b_go);
    e_gi = b_gi ^ andn(b_go, b_gu);
    e_go = b_go ^ andn(b_gu, b_ga);
    e_gu = b_gu ^ andn(b_ga, b_ge);
    b_ka = rol64(a_be ^ d_e, 1);
    b_ke = rol64(a_gi ^ d_i, 6);
    b_ki = rol64(a_ko ^ d_o, 25);
    b_ko = rol64(a_mu ^ d_u, 8);
    b_ku = rol64(a_sa ^ d_a, 18);
    e_ka = b_ka ^ andn(b_ke, b_ki);
    e_ke = b_ke ^ andn(b_ki, b_ko);
    e_ki = b_ki ^ andn(b_ko, b_ku);
    e_ko = b_ko ^ andn(b_ku, b_ka);
    e_ku = b_ku ^ andn(b_ka, b_ke);
    b_ma = rol64(a_bu ^ d_u, 27);
    b_me = rol64(a_ga ^ d_a, 36);
    b_mi = rol64(a_ke ^ d_e, 10);
    b_mo = rol64(a_mi ^ d_i, 15);
    b_mu = rol64(a_so ^ d_o, 56);
    e_ma = b_ma ^ andn(b_me, b_mi);
    e_me = b_me ^ andn(b_mi, b_mo);
    e_mi = b_mi ^ andn(b_mo, b_mu);
    e_mo = b_mo ^ andn(b_mu, b_ma);
    e_mu = b_mu ^ andn(b_ma, b_me);
    b_sa = rol64(a_bi ^ d_i, 62);
    b_se = rol64(a_go ^ d_o, 55);
    b_si = rol64(a_ku ^ d_u, 39);
    b_so = rol64(a_ma ^ d_a, 41);
    b_su = rol64(a_se ^ d_e, 2);
    e_sa = b_sa ^ andn(b_se, b_si);
    e_se = b_se ^ andn(b_si, b_so);
    e_si = b_si ^ andn(b_so, b_su);
    e_so = b_so ^ andn(b_su, b_sa);
    e_su = b_su ^ andn(b_sa, b_se);
    c_a = e_ba ^ e_ga ^ e_ka ^ e_ma ^ e_sa;
    c_e = e_be ^ e_ge ^ e_ke ^ e_me ^ e_se;
    c_i = e_bi ^ e_gi ^ e_ki ^ e_mi ^ e_si;
    c_o = e_bo ^ e_go ^ e_ko ^ e_mo ^ e_so;
    c_u = e_bu ^ e_gu ^ e_ku ^ e_mu ^ e_su;

    d_a = c_u ^ rol64(c_e, 1);
    d_e = c_a ^ rol64(c_i, 1);
    d_i = c_e ^ rol64(c_o, 1);
    d_o = c_i ^ rol64(c_u, 1);
    d_u = c_o ^ rol64(c_a, 1);
    e_ba ^= d_a;
    b_be = rol64(e_ge ^ d_e, 44);
    b_bi = rol64(e_ki ^ d_i, 43);
    b_bo = rol64(e_mo ^ d_o, 21);
    b_bu = rol64(e_su ^ d_u, 14);
    a_ba = e_ba ^ andn(b_be, b_bi) ^ 0x8000000000000080;
    a_be = b_be ^ andn(b_bi, b_bo);
    a_bi = b_bi ^ andn(b_bo, b_bu);
    a_bo = b_bo ^ andn(b_bu, e_ba);
    a_bu = b_bu ^ andn(e_ba, b_be);
    b_ga = rol64(e_bo ^ d_o, 28);
    b_ge = rol64(e_gu ^ d_u, 20);
    b_gi = rol64(e_ka ^ d_a, 3);
    b_go = rol64(e_me ^ d_e, 45);
    b_gu = rol64(e_si ^ d_i, 61);
    a_ga = b_ga ^ andn(b_ge, b_gi);
    a_ge = b_ge ^ andn(b_gi, b_go);
    a_gi = b_gi ^ andn(b_go, b_gu);
    a_go = b_go ^ andn(b_gu, b_ga);
    a_gu = b_gu ^ andn(b_ga, b_ge);
    b_ka = rol64(e_be ^ d_e, 1);
    b_ke = rol64(e_gi ^ d_i, 6);
    b_ki = rol64(e_ko ^ d_o, 25);
    b_ko = rol64(e_mu ^ d_u, 8);
    b_ku = rol64(e_sa ^ d_a, 18);
    a_ka = b_ka ^ andn(b_ke, b_ki);
    a_ke = b_ke ^ andn(b_ki, b_ko);
    a_ki = b_ki ^ andn(b_ko, b_ku);
    a_ko = b_ko ^ andn(b_ku, b_ka);
    a_ku = b_ku ^ andn(b_ka, b_ke);
    b_ma = rol64(e_bu ^ d_u, 27);
    b_me = rol64(e_ga ^ d_a, 36);
    b_mi = rol64(e_ke ^ d_e, 10);
    b_mo = rol64(e_mi ^ d_i, 15);
    b_mu = rol64(e_so ^ d_o, 56);
    a_ma = b_ma ^ andn(b_me, b_mi);
    a_me = b_me ^ andn(b_mi, b_mo);
    a_mi = b_mi ^ andn(b_mo, b_mu);
    a_mo = b_mo ^ andn(b_mu, b_ma);
    a_mu = b_mu ^ andn(b_ma, b_me);
    b_sa = rol64(e_bi ^ d_i, 62);
    b_se = rol64(e_go ^ d_o, 55);
    b_si = rol64(e_ku ^ d_u, 39);
    b_so = rol64(e_ma ^ d_a, 41);
    b_su = rol64(e_se ^ d_e, 2);
    a_sa = b_sa ^ andn(b_se, b_si);
    a_se = b_se ^ andn(b_si, b_so);
    a_si = b_si ^ andn(b_so, b_su);
    a_so = b_so ^ andn(b_su, b_sa);
    a_su = b_su ^ andn(b_sa, b_se);
    c_a = a_ba ^ a_ga ^ a_ka ^ a_ma ^ a_sa;
    c_e = a_be ^ a_ge ^ a_ke ^ a_me ^ a_se;
    c_i = a_bi ^ a_gi ^ a_ki ^ a_mi ^ a_si;
    c_o = a_bo ^ a_go ^ a_ko ^ a_mo ^ a_so;
    c_u = a_bu ^ a_gu ^ a_ku ^ a_mu ^ a_su;

    d_a = c_u ^ rol64(c_e, 1);
    d_e = c_a ^ rol64(c_i, 1);
    d_i = c_e ^ rol64(c_o, 1);
    d_o = c_i ^ rol64(c_u, 1);
    d_u = c_o ^ rol64(c_a, 1);
    a_ba ^= d_a;
    b_be = rol64(a_ge ^ d_e, 44);
    b_bi = rol64(a_ki ^ d_i, 43);
    b_bo = rol64(a_mo ^ d_o, 21);
    b_bu = rol64(a_su ^ d_u, 14);
    e_ba = a_ba ^ andn(b_be, b_bi) ^ 0x000000000000800a;
    e_be = b_be ^ andn(b_bi, b_bo);
    e_bi = b_bi ^ andn(b_bo, b_bu);
    e_bo = b_bo ^ andn(b_bu, a_ba);
    e_bu = b_bu ^ andn(a_ba, b_be);
    b_ga = rol64(a_bo ^ d_o, 28);
    b_ge = rol64(a_gu ^ d_u, 20);
    b_gi = rol64(a_ka ^ d_a, 3);
    b_go = rol64(a_me ^ d_e, 45);
    b_gu = rol64(a_si ^ d_i, 61);
    e_ga = b_ga ^ andn(b_ge, b_gi);
    e_ge = b_ge ^ andn(b_gi, b_go);
    e_gi = b_gi ^ andn(b_go, b_gu);
    e_go = b_go ^ andn(b_gu, b_ga);
    e_gu = b_gu ^ andn(b_ga, b_ge);
    b_ka = rol64(a_be ^ d_e, 1);
    b_ke = rol64(a_gi ^ d_i, 6);
    b_ki = rol64(a_ko ^ d_o, 25);
    b_ko = rol64(a_mu ^ d_u, 8);
    b_ku = rol64(a_sa ^ d_a, 18);
    e_ka = b_ka ^ andn(b_ke, b_ki);
    e_ke = b_ke ^ andn(b_ki, b_ko);
    e_ki = b_ki ^ andn(b_ko, b_ku);
    e_ko = b_ko ^ andn(b_ku, b_ka);
    e_ku = b_ku ^ andn(b_ka, b_ke);
    b_ma = rol64(a_bu ^ d_u, 27);
    b_me = rol64(a_ga ^ d_a, 36);
    b_mi = rol64(a_ke ^ d_e, 10);
    b_mo = rol64(a_mi ^ d_i, 15);
    b_mu = rol64(a_so ^ d_o, 56);
    e_ma = b_ma ^ andn(b_me, b_mi);
    e_me = b_me ^ andn(b_mi, b_mo);
    e_mi = b_mi ^ andn(b_mo, b_mu);
    e_mo = b_mo ^ andn(b_mu, b_ma);
    e_mu = b_mu ^ andn(b_ma, b_me);
    b_sa = rol64(a_bi ^ d_i, 62);
    b_se = rol64(a_go ^ d_o, 55);
    b_si = rol64(a_ku ^ d_u, 39);
    b_so = rol64(a_ma ^ d_a, 41);
    b_su = rol64(a_se ^ d_e, 2);
    e_sa = b_sa ^ andn(b_se, b_si);
    e_se = b_se ^ andn(b_si, b_so);
    e_si = b_si ^ andn(b_so, b_su);
    e_so = b_so ^ andn(b_su, b_sa);
    e_su = b_su ^ andn(b_sa, b_se);
    c_a = e_ba ^ e_ga ^ e_ka ^ e_ma ^ e_sa;
    c_e = e_be ^ e_ge ^ e_ke ^ e_me ^ e_se;
    c_i = e_bi ^ e_gi ^ e_ki ^ e_mi ^ e_si;
    c_o = e_bo ^ e_go ^ e_ko ^ e_mo ^ e_so;
    c_u = e_bu ^ e_gu ^ e_ku ^ e_mu ^ e_su;

    d_a = c_u ^ rol64(c_e, 1);
    d_e = c_a ^ rol64(c_i, 1);
    d_i = c_e ^ rol64(c_o, 1);
    d_o = c_i ^ rol64(c_u, 1);
    d_u = c_o ^ rol64(c_a, 1);
    e_ba ^= d_a;
    b_be = rol64(e_ge ^ d_e, 44);
    b_bi = rol64(e_ki ^ d_i, 43);
    b_bo = rol64(e_mo ^ d_o, 21);
    b_bu = rol64(e_su ^ d_u, 14);
    a_ba = e_ba ^ andn(b_be, b_bi) ^ 0x800000008000000a;
    a_be = b_be ^ andn(b_bi, b_bo);
    a_bi = b_bi ^ andn(b_bo, b_bu);
    a_bo = b_bo ^ andn(b_bu, e_ba);
    a_bu = b_bu ^ andn(e_ba, b_be);
    b_ga = rol64(e_bo ^ d_o, 28);
    b_ge = rol64(e_gu ^ d_u, 20);
    b_gi = rol64(e_ka ^ d_a, 3);
    b_go = rol64(e_me ^ d_e, 45);
    b_gu = rol64(e_si ^ d_i, 61);
    a_ga = b_ga ^ andn(b_ge, b_gi);
    a_ge = b_ge ^ andn(b_gi, b_go);
    a_gi = b_gi ^ andn(b_go, b_gu);
    a_go = b_go ^ andn(b_gu, b_ga);
    a_gu = b_gu ^ andn(b_ga, b_ge);
    b_ka = rol64(e_be ^ d_e, 1);
    b_ke = rol64(e_gi ^ d_i, 6);
    b_ki = rol64(e_ko ^ d_o, 25);
    b_ko = rol64(e_mu ^ d_u, 8);
    b_ku = rol64(e_sa ^ d_a, 18);
    a_ka = b_ka ^ andn(b_ke, b_ki);
    a_ke = b_ke ^ andn(b_ki, b_ko);
    a_ki = b_ki ^ andn(b_ko, b_ku);
    a_ko = b_ko ^ andn(b_ku, b_ka);
    a_ku = b_ku ^ andn(b_ka, b_ke);
    b_ma = rol64(e_bu ^ d_u, 27);
    b_me = rol64(e_ga ^ d_a, 36);
    b_mi = rol64(e_ke ^ d_e, 10);
    b_mo = rol64(e_mi ^ d_i, 15);
    b_mu = rol64(e_so ^ d_o, 56);
    a_ma = b_ma ^ andn(b_me, b_mi);
    a_me = b_me ^ andn(b_mi, b_mo);
    a_mi = b_mi ^ andn(b_mo, b_mu);
    a_mo = b_mo ^ andn(b_mu, b_ma);
    a_mu = b_mu ^ andn(b_ma, b_me);
    b_sa = rol64(e_bi ^ d_i, 62);
    b_se = rol64(e_go ^ d_o, 55);
    b_si = rol64(e_ku ^ d_u, 39);
    b_so = rol64(e_ma ^ d_a, 41);
    b_su = rol64(e_se ^ d_e, 2);
    a_sa = b_sa ^ andn(b_se, b_si);
    a_se = b_se ^ andn(b_si, b_so);
    a_si = b_si ^ andn(b_so, b_su);
    a_so = b_so ^ andn(b_su, b_sa);
    a_su = b_su ^ andn(b_sa, b_se);
    c_a = a_ba ^ a_ga ^ a_ka ^ a_ma ^ a_sa;
    c_e = a_be ^ a_ge ^ a_ke ^ a_me ^ a_se;
    c_i = a_bi ^ a_gi ^ a_ki ^ a_mi ^ a_si;
    c_o = a_bo ^ a_go ^ a_ko ^ a_mo ^ a_so;
    c_u = a_bu ^ a_gu ^ a_ku ^ a_mu ^ a_su;

    d_a = c_u ^ rol64(c_e, 1);
    d_e = c_a ^ rol64(c_i, 1);
    d_i = c_e ^ rol64(c_o, 1);
    d_o = c_i ^ rol64(c_u, 1);
    d_u = c_o ^ rol64(c_a, 1);
    a_ba ^= d_a;
    b_be = rol64(a_ge ^ d_e, 44);
    b_bi = rol64(a_ki ^ d_i, 43);
    b_bo = rol64(a_mo ^ d_o, 21);
    b_bu = rol64(a_su ^ d_u, 14);
    e_ba = a_ba ^ andn(b_be, b_bi) ^ 0x8000000080008081;
    e_be = b_be ^ andn(b_bi, b_bo);
    e_bi = b_bi ^ andn(b_bo, b_bu);
    e_bo = b_bo ^ andn(b_bu, a_ba);
    e_bu = b_bu ^ andn(a_ba, b_be);
    b_ga = rol64(a_bo ^ d_o, 28);
    b_ge = rol64(a_gu ^ d_u, 20);
    b_gi = rol64(a_ka ^ d_a, 3);
    b_go = rol64(a_me ^ d_e, 45);
    b_gu = rol64(a_si ^ d_i, 61);
    e_ga = b_ga ^ andn(b_ge, b_gi);
    e_ge = b_ge ^ andn(b_gi, b_go);
    e_gi = b_gi ^ andn(b_go, b_gu);
    e_go = b_go ^ andn(b_gu, b_ga);
    e_gu = b_gu ^ andn(b_ga, b_ge);
    b_ka = rol64(a_be ^ d_e, 1);
    b_ke = rol64(a_gi ^ d_i, 6);
    b_ki = rol64(a_ko ^ d_o, 25);
    b_ko = rol64(a_mu ^ d_u, 8);
    b_ku = rol64(a_sa ^ d_a, 18);
    e_ka = b_ka ^ andn(b_ke, b_ki);
    e_ke = b_ke ^ andn(b_ki, b_ko);
    e_ki = b_ki ^ andn(b_ko, b_ku);
    e_ko = b_ko ^ andn(b_ku, b_ka);
    e_ku = b_ku ^ andn(b_ka, b_ke);
    b_ma = rol64(a_bu ^ d_u, 27);
    b_me = rol64(a_ga ^ d_a, 36);
    b_mi = rol64(a_ke ^ d_e, 10);
    b_mo = rol64(a_mi ^ d_i, 15);
    b_mu = rol64(a_so ^ d_o, 56);
    e_ma = b_ma ^ andn(b_me, b_mi);
    e_me = b_me ^ andn(b_mi, b_mo);
    e_mi = b_mi ^ andn(b_mo, b_mu);
    e_mo = b_mo ^ andn(b_mu, b_ma);
    e_mu = b_mu ^ andn(b_ma, b_me);
    b_sa = rol64(a_bi ^ d_i, 62);
    b_se = rol64(a_go ^ d_o, 55);
    b_si = rol64(a_ku ^ d_u, 39);
    b_so = rol64(a_ma ^ d_a, 41);
    b_su = rol64(a_se ^ d_e, 2);
    e_sa = b_sa ^ andn(b_se, b_si);
    e_se = b_se ^ andn(b_si, b_so);
    e_si = b_si ^ andn(b_so, b_su);
    e_so = b_so ^ andn(b_su, b_sa);
    e_su = b_su ^ andn(b_sa, b_se);
    c_a = e_ba ^ e_ga ^ e_ka ^ e_ma ^ e_sa;
    c_e = e_be ^ e_ge ^ e_ke ^ e_me ^ e_se;
    c_i = e_bi ^ e_gi ^ e_ki ^ e_mi ^ e_si;
    c_o = e_bo ^ e_go ^ e_ko ^ e_mo ^ e_so;
    c_u = e_bu ^ e_gu ^ e_ku ^ e_mu ^ e_su;

    d_a = c_u ^ rol64(c_e, 1);
    d_e = c_a ^ rol64(c_i, 1);
    d_i = c_e ^ rol64(c_o, 1);
    d_o = c_i ^ rol64(c_u, 1);
    d_u = c_o ^ rol64(c_a, 1);
    e_ba ^= d_a;
    b_be = rol64(e_ge ^ d_e, 44);
    b_bi = rol64(e_ki ^ d_i, 43);
    b_bo = rol64(e_mo ^ d_o, 21);
    b_bu = rol64(e_su ^ d_u, 14);
    a_ba = e_ba ^ andn(b_be, b_bi) ^ 0x8000000000008080;
    a_be = b_be ^ andn(b_bi, b_bo);
    a_bi = b_bi ^ andn(b_bo, b_bu);
    a_bo = b_bo ^ andn(b_bu, e_ba);
    a_bu = b_bu ^ andn(e_ba, b_be);
    b_ga = rol64(e_bo ^ d_o, 28);
    b_ge = rol64(e_gu ^ d_u, 20);
    b_gi = rol64(e_ka ^ d_a, 3);
    b_go = rol64(e_me ^ d_e, 45);
    b_gu = rol64(e_si ^ d_i, 61);
    a_ga = b_ga ^ andn(b_ge, b_gi);
    a_ge = b_ge ^ andn(b_gi, b_go);
    a_gi = b_gi ^ andn(b_go, b_gu);
    a_go = b_go ^ andn(b_gu, b_ga);
    a_gu = b_gu ^ andn(b_ga, b_ge);
    b_ka = rol64(e_be ^ d_e, 1);
    b_ke = rol64(e_gi ^ d_i, 6);
    b_ki = rol64(e_ko ^ d_o, 25);
    b_ko = rol64(e_mu ^ d_u, 8);
    b_ku = rol64(e_sa ^ d_a, 18);
    a_ka = b_ka ^ andn(b_ke, b_ki);
    a_ke = b_ke ^ andn(b_ki, b_ko);
    a_ki = b_ki ^ andn(b_ko, b_ku);
    a_ko = b_ko ^ andn(b_ku, b_ka);
    a_ku = b_ku ^ andn(b_ka, b_ke);
    b_ma = rol64(e_bu ^ d_u, 27);
    b_me = rol64(e_ga ^ d_a, 36);
    b_mi = rol64(e_ke ^ d_e, 10);
    b_mo = rol64(e_mi ^ d_i, 15);
    b_mu = rol64(e_so ^ d_o, 56);
    a_ma = b_ma ^ andn(b_me, b_mi);
    a_me = b_me ^ andn(b_mi, b_mo);
    a_mi = b_mi ^ andn(b_mo, b_mu);
    a_mo = b_mo ^ andn(b_mu, b_ma);
    a_mu = b_mu ^ andn(b_ma, b_me);
    b_sa = rol64(e_bi ^ d_i, 62);
    b_se = rol64(e_go ^ d_o, 55);
    b_si = rol64(e_ku ^ d_u, 39);
    b_so = rol64(e_ma ^ d_a, 41);
    b_su = rol64(e_se ^ d_e, 2);
    a_sa = b_sa ^ andn(b_se, b_si);
    a_se = b_se ^ andn(b_si, b_so);
    a_si = b_si ^ andn(b_so, b_su);
    a_so = b_so ^ andn(b_su, b_sa);
    a_su = b_su ^ andn(b_sa, b_se);
    c_a = a_ba ^ a_ga ^ a_ka ^ a_ma ^ a_sa;
    c_e = a_be ^ a_ge ^ a_ke ^ a_me ^ a_se;
    c_i = a_bi ^ a_gi ^ a_ki ^ a_mi ^ a_si;
    c_o = a_bo ^ a_go ^ a_ko ^ a_mo ^ a_so;
    c_u = a_bu ^ a_gu ^ a_ku ^ a_mu ^ a_su;

    d_a = c_u ^ rol64(c_e, 1);
    d_e = c_a ^ rol64(c_i, 1);
    d_i = c_e ^ rol64(c_o, 1);
    d_o = c_i ^ rol64(c_u, 1);
    d_u = c_o ^ rol64(c_a, 1);
    b_ba = a_ba ^ d_a;
    b_be = rol64(a_ge ^ d_e, 44);
    b_bi = rol64(a_ki ^ d_i, 43);
    b_bo = rol64(a_mo ^ d_o, 21);
    b_bu = rol64(a_su ^ d_u, 14);
    b_ga = rol64(a_bo ^ d_o, 28);
    b_ge = rol64(a_gu ^ d_u, 20);
    b_gi = rol64(a_ka ^ d_a, 3);
    b_go = rol64(a_me ^ d_e, 45);
    b_gu = rol64(a_si ^ d_i, 61);
    b_ka = rol64(a_be ^ d_e, 1);
    b_ke = rol64(a_gi ^ d_i, 6);
    b_ki = rol64(a_ko ^ d_o, 25);
    b_ko = rol64(a_mu ^ d_u, 8);
    b_ku = rol64(a_sa ^ d_a, 18);
    b_ma = rol64(a_bu ^ d_u, 27);
    b_me = rol64(a_ga ^ d_a, 36);
    b_mi = rol64(a_ke ^ d_e, 10);
    b_mo = rol64(a_mi ^ d_i, 15);
    b_mu = rol64(a_so ^ d_o, 56);
    b_sa = rol64(a_bi ^ d_i, 62);
    b_se = rol64(a_go ^ d_o, 55);
    b_si = rol64(a_ku ^ d_u, 39);
    b_so = rol64(a_ma ^ d_a, 41);
    b_su = rol64(a_se ^ d_e, 2);
    e_ba = b_ba ^ andn(b_be, b_bi) ^ 0x0000000080000001;
    e_ge = b_ge ^ andn(b_gi, b_go);
    e_ki = b_ki ^ andn(b_ko, b_ku);
    e_mo = b_mo ^ andn(b_mu, b_ma);
    e_su = b_su ^ andn(b_sa, b_se);
    c_a = e_ba ^ b_ga ^ b_ka ^ b_ma ^ b_sa ^ andn(b_ge, b_gi) ^ andn(b_ke, b_ki) ^ andn(b_me, b_mi) ^ andn(b_se, b_si);
    c_e = b_be ^ e_ge ^ b_ke ^ b_me ^ b_se ^ andn(b_bi, b_bo) ^ andn(b_ki, b_ko) ^ andn(b_mi, b_mo) ^ andn(b_si, b_so);
    c_i = b_bi ^ b_gi ^ e_ki ^ b_mi ^ b_si ^ andn(b_bo, b_bu) ^ andn(b_go, b_gu) ^ andn(b_mo, b_mu) ^ andn(b_so, b_su);
    c_o = b_bo ^ b_go ^ b_ko ^ e_mo ^ b_so ^ andn(b_bu, b_ba) ^ andn(b_gu, b_ga) ^ andn(b_ku, b_ka) ^ andn(b_su, b_sa);
    c_u = b_bu ^ b_gu ^ b_ku ^ b_mu ^ e_su ^ andn(b_ba, b_be) ^ andn(b_ga, b_ge) ^ andn(b_ka, b_ke) ^ andn(b_ma, b_me);

    b_ba = e_ba ^ c_u ^ rol64(c_e, 1);
    b_be = rol64(e_ge ^ c_a ^ rol64(c_i, 1), 44);
    b_bi = rol64(e_ki ^ c_e ^ rol64(c_o, 1), 43);
    b_bo = rol64(e_mo ^ c_i ^ rol64(c_u, 1), 21);
    b_bu = rol64(e_su ^ c_o ^ rol64(c_a, 1), 14);
    output[0] = b_ba ^ andn(b_be, b_bi) ^ 0x8000000080008008;
    output[1] = b_be ^ andn(b_bi, b_bo);
    output[2] = b_bi ^ andn(b_bo, b_bu);
    output[3] = b_bo ^ andn(b_bu, b_ba);
}

#[inline(always)]
fn rol64(n: u64, o: u32) -> u64 {
    n.rotate_left(o)
}

#[inline(always)]
fn andn(a: u64, b: u64) -> u64 {
    (!a) & b
}

#[test]
fn test() {
    let gamming_key_and_nonce: [u64; 8] = [0, 0, 0, 0, 17455218365382369938, 8112036980332488112, 10114580564288690204, 8556998464221648101];
    let mut gamming_key: [u64; 4] = [0; 4];

    kangarootwelve64to32(&gamming_key_and_nonce, &mut gamming_key);
    let bytes: [u8; 32] = gamming_key.into_iter().flat_map(u64::to_le_bytes).collect::<Vec<_>>().try_into().unwrap();
    assert_eq!(bytes, [0, 32, 249, 137, 140, 96, 24, 28, 70, 109, 27, 240, 57, 166, 254, 183, 39, 66, 155, 151, 239, 64, 79, 133, 110, 95, 135, 139, 184, 226, 214, 92]);

    unsafe {
        let gamming_key_and_nonce = *(gamming_key_and_nonce.as_ptr() as *const [u8; 64]);
        let mut output = [0u8; 32];
        let mut kg = kangarootwelve::KangarooTwelve::hash(&gamming_key_and_nonce, &[]);
        kg.squeeze(&mut output);

        assert_eq!(output, [0, 32, 249, 137, 140, 96, 24, 28, 70, 109, 27, 240, 57, 166, 254, 183, 39, 66, 155, 151, 239, 64, 79, 133, 110, 95, 135, 139, 184, 226, 214, 92]);
    }
    
}